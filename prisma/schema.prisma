// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id          String   @id @default(uuid())
  userId      String
  title       String   @db.Text
  isPublished Boolean  @default(false)
  description String?  @db.Text
  imageUrl    String?  @db.Text
  price       Float?
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  questions   Question[]
  exams       Exam[]

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  courseId    String
  description String?  @db.Text
  videoUrl    String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userProgresses UserProgress[]
  notes          Note[]
  questions      Question[]
  muxData        MuxData?
  course         Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  chapterId  String  @unique
  playbackId String?

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Note {
  id        String   @id @default(uuid())
  userId    String
  chapterId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model Personalization {
  id        String   @id @default(uuid())
  userId    String   @unique
  dashboard String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         String   @id @default(uuid())
  label      String   @db.Text
  value      String   @db.Text
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Question {
  id            String   @id @default(uuid())
  question      String   @db.Text
  correctAnswer String   @db.Text
  courseId      String
  chapterId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  answer  Answer[]
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapter Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([chapterId])
}

model Exam {
  id        String   @id @default(uuid())
  userId    String
  answers   String   @db.Text
  exactRate Float
  isPerfect Boolean  @default(false)
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}
